@use "sass:list";
@use "sass:map";
@use "sass:math";



// Generate unit graph calc() expression
// @param {List} $points - list of points
// @return {String}
@function graph( $points... ) {
  // Generated calc expression
  $calc: null;

  // Line starting point (previous)
  $p1: null;

  // Line ending point (current)
  $p2: null;

  // Line angle (previous)
  $deg: null;

  // Require at least 2 points
  @if list.length($points) < 2 {
    @error "SASS Unit Graph function required at least 2 points as arguments.";
  }

  // Normalize unit
  $points: _normalize($points);
  
  // Each points...
  @each $point in $points {
    $p2: $point;
    @if ($p1 and $p2) {
      // Combine with previous calc
      @if ($calc and $deg) {
        $fn: "min";
        @if ($deg < _angle($p1, $p2)) {
          $fn: "max";
        }
        $calc:  "#{$fn}(#{$calc},#{_line($p1, $p2)})";
        $deg:   _angle($p1, $p2);
      }
      // First calc
      @else {
        $calc:  _line($p1, $p2);
        $deg:   _angle($p1, $p2);
      }
    } 
    $p1: $p2;
  }

  @return #{$calc};
}



// Normalize points absolute unit to pixel
// @access private
// @param {List} $points
// @return {List}
@function _normalize( $points ) {
  @each $point in $points {
    // CSS absolute units are converted to pixel.
    // https://sass-lang.com/documentation/operators/numeric#units
    $point-value: (
      0px + list.nth($point, 1),
      0px + list.nth($point, 2)
    );
    $point-index: list.index($points, $point);
    $points: list.set-nth($points, $point-index, $point-value);
  }
  @return $points;
}



// Create a line expression from 2 points
// @access private
// @param {List} $p1 - Starting point (x, y)
// @param {List} $p2 - Ending point (x, y)
// @return {String}
@function _line( $p1, $p2 ) {
  $p1x:         list.nth($p1, 1);
  $p1y:         list.nth($p1, 2);

  $p2x:         list.nth($p2, 1);
  $p2y:         list.nth($p2, 2);

  @if ($p1x == $p2x or $p1y == $p2y) {
    @return "#{$p2y}";
  }

  $rise:        $p2y - $p1y;
  $run:         $p2x - $p1x;
  $slope:       math.div($rise, $run);
  $intercept:   $p1y - $slope * $p1x;

  $calc:        "#{$intercept} + #{$slope * 100vw}";
  $calc:        "calc(#{$calc})";

  @return $calc;
}



// Angle of line between 2 points (from 90deg to -90deg) 
// @access private
// @param {List} $p1 - Starting point (x, y)
// @param {List} $p2 - Ending point (x, y)
// @return {Number}
@function _angle( $p1, $p2 ) {
  $p1x:         list.nth($p1, 1);
  $p1y:         list.nth($p1, 2);

  $p2x:         list.nth($p2, 1);
  $p2y:         list.nth($p2, 2);

  $x:           $p2x - $p1x;
  $y:           $p2y - $p1y;
  
  @return       math.atan2($y, $x);
}